#Windows makefile test project settings

ANDROID_CFLAGS := $(CFLAGS)
ANDROID_LDFLAGS := $(LDFLAGS)

BUILD_DIR = ./

#Name of the destination application!
TARGET = $(BUILD_NAME)

BUILD_INTERMEDIATE = Android

TARGET_PROFILE_TXT = profiler.txt
TARGET_PROFILE_CMP_TXT = profiler2.txt

#GProf switches!
GPROF_SWITCHES =

# ###################################################

#Our actual building script doing all the hard work:

#Our filenames of the targets (release and debug)!
TARGET_RELEASE = $(TARGET)
TARGET_DEBUG = dbg$(TARGET)
TARGET_PROFILE = prof$(TARGET)

#Programs
#CC = $(CROSS_COMPILE)gcc
RM = rm -f
ifeq (,$(MKDIR))
MKDIR = mkdir
endif

WARNS = -Wall

ifneq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL2 functions instead!
INCLUDE_DIRS := -I. $(ANDROID_CFLAGS) $(shell sdl2-config --cflags)
endif

ifeq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL1 functions instead!
INCLUDE_DIRS := -I. $(ANDROID_CFLAGS) $(shell sdl-config --cflags)
endif

#Common emulator framework!
INCLUDE_DIRS := $(INCLUDE_DIRS) -I../commonemuframework

#Default optimization flags!
OPTIMIZATIONFLAGS = -O3

#Execute stripping if set below!
STRIP = -s

#Building for debugging optimization flags
ifneq (,$(findstring debug,$(MAKECMDGOALS)))
OPTIMIZATIONFLAGS = -Og
endif

#Building for debugger and normal CFLAGS
BUILD_CFLAGS = -enable-core-inline -static-libgcc -static-libstdc++
ifneq (,$(findstring debug,$(MAKECMDGOALS)))
BUILD_CFLAGS = -ggdb -ffunction-sections
endif

ifneq (,$(findstring profile,$(MAKECMDGOALS)))
BUILD_CFLAGS = -g -pg -ffunction-sections -enable-core-inline -static-libgcc -static-libstdc++
endif

#Different kinds of flags!
#Add -mno-ms-bitfields to fix broken bitfields and type sizes in MinGW.
CFLAGS := $(CFLAGS) -DPELYAS_SDL -DANDROID -std=c99 ${WARNS}

CFLAGS := $(CFLAGS) -D$(BUILD_DEFINE)

#Apply build directory etc.
BUILD_RELEASE = $(BUILD_DIR)/$(BUILD_INTERMEDIATE)/$(TARGET_RELEASE)
BUILD_DEBUG = $(BUILD_DIR)/$(BUILD_INTERMEDIATE)/$(TARGET_DEBUG)
BUILD_PROFILE = $(BUILD_DIR)/$(BUILD_INTERMEDIATE)/$(TARGET_PROFILE)
BUILD_PROFILE_GMON = $(BUILD_DIR)/gmon.out
BUILD_PROFILE_GMON_TXT = $(BUILD_DIR)/$(TARGET_PROFILE_TXT)
BUILD_PROFILE_GMON_CMP_TXT = $(BUILD_DIR)/$(TARGET_PROFILE_CMP_TXT)

#Make sure the objects to compile are sorted!
OBJS := $(sort $(OBJS))

OBJS := $(patsubst %.o,$(BUILD_DIR)/$(BUILD_INTERMEDIATE)/%.o,$(subst ../,___/,$(OBJS)))

# can be ./src in different location
subdir := $(ROOTPATH)/..
# may have SHA-1 (detached HEAD) 
subdep := $(subdir)/.git/HEAD
# may be a ref HEAD (for any branch/tag) 
gitref := $(word 2, $(shell cat $(subdep)))
# append it if referenced HEAD
ifneq "$(gitref)" ""
# e.g. HEAD & refs/heads/master 
subdep += $(subdir)/.git/$(gitref)
endif

#Rules themselves!
#Build,debug and analyze(profile subcommand) command support!

build: $(BUILD_RELEASE)
profile: $(BUILD_PROFILE)
reprofile: clean profile

#Run debugger now on the executable!
debug: $(BUILD_DEBUG)
	$(info Starting gdb...)
	@gdb -w --cd="$(BUILD_DIR)" --se="$(TARGET_DEBUG)"

redebug: clean debug

#Dependancy support!
-include $(OBJS:.o=.d)

#Compile into debug mode without stripping (-s)!
$(BUILD_DEBUG): ${OBJS}
	$(info Creating debug executable $(TARGET_DEBUG)...)
	@$(MKDIR) -p $(dir $@)
	@${CC} -ggdb -o "$@" $(OBJS) -Wl,-gc-sections ${ANDROID_LDFLAGS} ${LDLIBS}

$(BUILD_PROFILE): ${OBJS}
	$(info Creating profiling executable $(TARGET_PROFILE)...)
	@$(MKDIR) -p $(dir $@)
	@${CC} -g -pg -o "$@" $(OBJS) -Wl,-gc-sections ${ANDROID_LDFLAGS} ${LDLIBS}

#Compile into release mode with stripping (-s)!
$(BUILD_RELEASE): ${OBJS}
	$(info Creating release executable $(TARGET_RELEASE)...)
	@$(MKDIR) -p $(dir $@)
	@${CC} -o "$@" ${OBJS} $(STRIP) ${ANDROID_LDFLAGS} ${LDLIBS}

gitcommitversion.h: $(subdep)
# Create the commit version header with our commit version: this cannot be passed directly to the interpreter(doesn't quote the data it contains)
	@-git update-index --assume-unchanged gitcommitversion.h
	@echo "#define GITVERSION \"$(GIT_VERSION)\"">gitcommitversion.h

#Main requires gitcommitversion.h to be up-to-date!
$(BUILD_DIR)/$(BUILD_INTERMEDIATE)/___/commonemuframework/emu/main.o: gitcommitversion.h

#Dummy to prevent compiling .d.o invalid paths!
%.d:
	@

#Normal compilation of seperate modules!
$(BUILD_DIR)/$(BUILD_INTERMEDIATE)/%.o:
	$(info Compiling $(subst ___/,../,$(patsubst $(BUILD_DIR)/$(BUILD_INTERMEDIATE)/%.o,%.c,$@)))
	@$(MKDIR) -p $(dir $@)
	@${CC} $(OPTIMIZATIONFLAGS) ${CFLAGS} $(BUILD_CFLAGS) ${INCLUDE_DIRS} -c $(subst ___/,../,$(patsubst $(BUILD_DIR)/$(BUILD_INTERMEDIATE)/%.o,%.c,$@)) -o $@
	@${CC} $(CFLAGS) $(INCLUDE_DIRS) -c $(subst ___/,../,$(patsubst $(BUILD_DIR)/$(BUILD_INTERMEDIATE)/%.o,%.c,$@)) -MM -MF $(patsubst %.o,%.d,$@)
	@sed -i 's|$(notdir $@):|$@:|' $(patsubst %.o,%.d,$@)

clean:
	@-$(RM) $(OBJS)
	@-$(RM) $(patsubst %.o,%.d,$(OBJS))
	@-$(RM) $(BUILD_RELEASE)
	@-$(RM) $(BUILD_PROFILE)
	@-$(RM) $(BUILD_DEBUG)
	@-$(RM) $(patsubst %.o,%.d,$(OBJS))

# Special flags that aren't targets, just targets used for creating compiler&linker flags!
.PHONY: SDL2 SDL2_net SDL2static android
